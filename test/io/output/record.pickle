ccopy_reg
_reconstructor
p1
(copenhtf.io.test_record
TestRecord
p2
c__builtin__
object
p3
NtRp4
(dp5
S'phases'
p6
(lp7
g1
(copenhtf.io.test_record
PhaseRecord
p8
g3
NtRp9
(dp10
S'start_time_millis'
p11
I1469678588267
sS'attachments'
p12
(dp13
sS'measurements'
p14
(dp15
S'widget_type'
p16
g1
(copenhtf.util.measurements
Measurement
p17
g3
NtRp18
(dp19
S'name'
p20
g16
sS'docstring'
p21
S'This measurement tracks the type of widgets.'
p22
sS'_notification_cb'
p23
NsS'validators'
p24
(lp25
g1
(copenhtf.util.validators
RegexMatcher
p26
g3
NtRp27
(dp28
S'regex'
p29
S'.*Widget$'
p30
sS'_compiled'
p31
cre
_compile
p32
(g30
I0
tRp33
sbasS'units'
p34
NsS'outcome'
p35
copenhtf.util.measurements
Outcome
p36
(I1
tRp37
sS'measured_value'
p38
g1
(copenhtf.util.measurements
MeasuredValue
p39
g3
NtRp40
(dp41
S'is_value_set'
p42
I01
sg20
g16
sS'stored_value'
p43
S'TestWidget'
p44
sbsS'dimensions'
p45
NsbsS'widget_color'
p46
g1
(g17
g3
NtRp47
(dp48
g20
g46
sg21
S'Color of the widget'
p49
sg23
Nsg24
(lp50
sg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp51
(dp52
g42
I01
sg20
g46
sg43
S'Black'
p53
sbsg45
NsbsS'unset_meas'
p54
g1
(g17
g3
NtRp55
(dp56
g20
g54
sg21
Nsg23
Nsg24
(lp57
sg34
Nsg35
g36
(I3
tRp58
sg38
g1
(g39
g3
NtRp59
(dp60
g42
I00
sg20
g54
sg43
Nsbsg45
NsbsS'widget_size'
p61
g1
(g17
g3
NtRp62
(dp63
g20
g61
sg21
Nsg23
Nsg24
(lp64
g1
(copenhtf.util.validators
InRange
p65
g3
NtRp66
(dp67
S'minimum'
p68
I1
sS'maximum'
p69
I4
sbasg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp70
(dp71
g42
I01
sg20
g61
sg43
I3
sbsg45
NsbssS'end_time_millis'
p72
I1469678591580
sS'result'
p73
g1
(copenhtf.exe.phase_executor
PhaseOutcome
p74
c__builtin__
tuple
p75
(copenhtf
PhaseResult
p76
(I1
tRp77
ttRp78
sS'codeinfo'
p79
g1
(copenhtf.io.test_record
CodeInfo
p80
g3
NtRp81
(dp82
g21
S'A hello world test phase.'
p83
sg20
S'hello_world'
p84
sS'sourcecode'
p85
S'@measures(\n    Measurement(\'unset_meas\'),\n    Measurement(\n        \'widget_type\').MatchesRegex(r\'.*Widget$\').Doc(\n            \'\'\'This measurement tracks the type of widgets.\'\'\'),\n    Measurement(\n        \'widget_color\').Doc(\'Color of the widget\'),\n    Measurement(\'widget_size\').InRange(1, 4))\n@plug(example=example_plug.ExamplePlug)\ndef hello_world(test, example):\n  """A hello world test phase."""\n  test.logger.info(\'Hello World!\')\n  test.measurements.widget_type = prompts.DisplayPrompt(\n      \'What\\\'s the widget type?\', text_input=True)\n  if test.measurements.widget_type == \'raise\':\n    raise Exception()\n  test.measurements.widget_color = \'Black\'\n  test.measurements.widget_size = 3\n  test.logger.info(\'Plug value: %s\', example.Increment())\n'
p86
sbsg20
g84
sbag1
(g8
g3
NtRp87
(dp88
g11
I1469678591582
sg12
(dp89
sg14
(dp90
S'monitor_measurement'
p91
g1
(g17
g3
NtRp92
(dp93
g20
g91
sg21
Nsg23
Nsg24
(lp94
sg34
Nsg35
g37
sg38
g1
(copenhtf.util.measurements
DimensionedMeasuredValue
p95
g3
NtRp96
(dp97
S'value_dict'
p98
ccollections
OrderedDict
p99
((lp100
(lp101
(F201.26485824584961
tp102
aI1
aa(lp103
(F1000.1428127288818
tp104
aI2
aa(lp105
(F2004.5640468597412
tp106
aI3
aa(lp107
(F3009.0148448944092
tp108
aI4
aatRp109
sS'notify_value_set'
p110
Nsg20
g91
sS'num_dimensions'
p111
I1
sbsg45
(g1
(copenhtf.util.units
Unit
p112
g75
(S'C26'
p113
S'ms'
p114
ttRp115
tp116
sbsS'level_all'
p117
g1
(g17
g3
NtRp118
(dp119
g20
g117
sg21
Nsg23
Nsg24
(lp120
sg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp121
(dp122
g42
I01
sg20
g117
sg43
I9
sbsg45
NsbsS'level_none'
p123
g1
(g17
g3
NtRp124
(dp125
g20
g123
sg21
Nsg23
Nsg24
(lp126
sg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp127
(dp128
g42
I01
sg20
g123
sg43
I0
sbsg45
NsbsS'level_some'
p129
g1
(g17
g3
NtRp130
(dp131
g20
g129
sg21
Nsg23
Nsg24
(lp132
sg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp133
(dp134
g42
I01
sg20
g129
sg43
I8
sbsg45
Nsbssg72
I1469678594599
sg73
g1
(g74
g75
(g77
ttRp135
sg79
g1
(g80
g3
NtRp136
(dp137
g21
S'Test phase that sets a measurement.'
p138
sg20
S'set_measurements'
p139
sg85
S"    @openhtf.PhaseOptions(requires_state=True)\n    @plugs.plug(update_kwargs=False, **monitor_plugs)\n    @measurements.measures(\n        measurements.Measurement(measurement_name).WithUnits(\n            units).WithDimensions(uom.UOM['MILLISECOND']))\n    @functools.wraps(phase_desc.func)\n    def MonitoredPhaseFunc(test_state, *args, **kwargs):\n      # Start monitor thread, it will run monitor_desc periodically.\n      monitor_thread = _MonitorThread(\n          measurement_name, monitor_desc, phase_desc.extra_kwargs, test_state,\n          poll_interval_ms)\n      monitor_thread.start()\n      try:\n        return phase_desc(test_state, *args, **kwargs)\n      finally:\n        monitor_thread.Kill()\n"
p140
sbsg20
g139
sbag1
(g8
g3
NtRp141
(dp142
g11
I1469678594600
sg12
(dp143
sg14
(dp144
S'lots_of_dims'
p145
g1
(g17
g3
NtRp146
(dp147
g20
g145
sg21
Nsg23
Nsg24
(lp148
sg34
Nsg35
g37
sg38
g1
(g95
g3
NtRp149
(dp150
g98
g99
((lp151
(lp152
(I1
I21
I101
tp153
aI123
aa(lp154
(I2
I22
I102
tp155
aI126
aa(lp156
(I3
I23
I103
tp157
aI129
aa(lp158
(I4
I24
I104
tp159
aI132
aatRp160
sg110
Nsg20
g145
sg111
I3
sbsg45
(g1
(g112
g75
(S'HTZ'
p161
S'Hz'
p162
ttRp163
g1
(g112
g75
(S'SEC'
p164
S's'
ttRp165
g1
(g112
g75
(S'C81'
p166
S'rad'
p167
ttRp168
tp169
sbsS'unset_dims'
p170
g1
(g17
g3
NtRp171
(dp172
g20
g170
sg21
Nsg23
Nsg24
(lp173
sg34
Nsg35
g58
sg38
g1
(g95
g3
NtRp174
(dp175
g98
g99
((ltRp176
sg110
Nsg20
g170
sg111
I1
sbsg45
(g1
(g112
g75
(g161
g162
ttRp177
tp178
sbsg45
g1
(g17
g3
NtRp179
(dp180
g20
g45
sg21
Nsg23
Nsg24
(lp181
sg34
Nsg35
g37
sg38
g1
(g95
g3
NtRp182
(dp183
g98
g99
((lp184
(lp185
(I0
tp186
aI1
aa(lp187
(I1
tp188
aI2
aa(lp189
(I2
tp190
aI4
aa(lp191
(I3
tp192
aI8
aa(lp193
(I4
tp194
aI16
aatRp195
sg110
Nsg20
g45
sg111
I1
sbsg45
(g1
(g112
g75
(g161
g162
ttRp196
tp197
sbssg72
I1469678594601
sg73
g1
(g74
g75
(g77
ttRp198
sg79
g1
(g80
g3
NtRp199
(dp200
g21
Nsg20
g45
sg85
S"@measures(\n    Measurement('unset_dims').WithDimensions(UOM['HERTZ']),\n    Measurement('dimensions').WithDimensions(UOM['HERTZ']),\n    Measurement('lots_of_dims').WithDimensions(\n        UOM['HERTZ'], UOM['SECOND'], UOM['RADIAN']))\ndef dimensions(test):\n  for dim in range(5):\n    test.measurements.dimensions[dim] = 1 << dim\n  for x, y, z in zip(range(1, 5), range(21, 25), range (101, 105)):\n    test.measurements.lots_of_dims[x, y, z] = x + y + z\n"
p201
sbsg20
g45
sbag1
(g8
g3
NtRp202
(dp203
g11
I1469678594601
sg12
(dp204
S'test_attachment'
p205
g1
(copenhtf.io.test_record
Attachment
p206
g75
(S'This is test attachment data.'
p207
NttRp208
sS'example_attachment.txt'
p209
g1
(g206
g75
(S'This is a text file attachment.\n'
p210
S'text/plain'
p211
ttRp212
ssg14
(dp213
sg72
I1469678594620
sg73
g1
(g74
g75
(g77
ttRp214
sg79
g1
(g80
g3
NtRp215
(dp216
g21
Nsg20
g12
sg85
S"def attachments(test):\n  test.attach('test_attachment', 'This is test attachment data.')\n  test.attach_from_file('example_attachment.txt')\n"
p217
sbsg20
g12
sbasg11
I1469678588265
sS'outcome_details'
p218
(lp219
sg72
I1469678594620
sS'station_id'
p220
S'jethier-macbookair.roam.corp.google.com'
p221
sS'dut_id'
p222
S'TestDUT'
p223
sS'code_info'
p224
g1
(g80
g3
NtRp225
(dp226
g21
S'Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py --config=example_config.yaml'
p227
sg20
S'all_the_things.py'
p228
sg85
S'# Copyright 2014 Google Inc. All Rights Reserved.\n\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n"""Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py --config=example_config.yaml\n"""\n\nimport json\nimport os\nimport time\n\nimport example_plug\nimport openhtf\n\nfrom openhtf.io import output\nfrom openhtf.io.output import json_factory\nfrom openhtf.io.output import mfg_inspector \nfrom openhtf.names import *\n# Uncomment for mfg-inspector output, requires setup.py build_proto.\n#from openhtf.io.output import mfg_inspector\n\n\n@plug(example=example_plug.ExamplePlug)\ndef example_monitor(example):\n  time.sleep(.2)\n  return example.Increment()\n'
p229
sbsS'log_records'
p230
(lp231
g1
(copenhtf.util.logs
LogRecord
p232
g75
(I20
S'openhtf.test_record.34002:1469678582941:4531051920'
p233
S'all_the_things.py'
p234
I53
I1469678588267
VHello World!
p235
ttRp236
ag1
(g232
g75
(I20
g233
g234
I60
I1469678591526
VPlug value: 0
p237
ttRp238
ag1
(g232
g75
(I10
g233
S'test_state.py'
p239
I272
I1469678594620
VFinishing test execution normally with outcome FAIL.
p240
ttRp241
asg35
copenhtf.io.test_record
Outcome
p242
(I2
tRp243
sS'metadata'
p244
(dp245
S'test_name'
p246
S'MyTest'
p247
sS'config'
p248
(dp249
S'enable_station_discovery'
p250
I01
sS'station_api_port'
p251
I8888
sS'allow_unset_measurements'
p252
I00
sS'teardown_timeout_s'
p253
I3
sS'station_api_bind_address'
p254
S'0.0.0.0'
p255
sS'example_plug_increment'
p256
I1
sg220
g221
sS'station_discovery_string'
p257
S'OPENHTF_DISCOVERY'
p258
sS'max_history_size_mb'
p259
I256
ssS'test_version'
p260
S'1.0.0'
p261
sS'test_description'
p262
S'OpenHTF Example Test'
p263
ssb.