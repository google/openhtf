cmutablerecords.records
_UnReduceRecord
p1
(S'TestRecord'
p2
(cmutablerecords.records
RecordClass
p3
t(dp4
S'optional_attributes'
p5
(dp6
S'phases'
p7
c__builtin__
list
p8
sS'start_time_millis'
p9
copenhtf.util
TimeMillis
p10
sS'outcome_details'
p11
g8
sS'end_time_millis'
p12
NsS'code_info'
p13
NsS'log_records'
p14
g8
sS'outcome'
p15
NsS'metadata'
p16
c__builtin__
dict
p17
ssS'required_attributes'
p18
(S'dut_id'
p19
S'station_id'
p20
tp21
s(S'TestDUT'
p22
S'jethier.mtv.corp.google.com'
p23
ttRp24
(dp25
g7
(lp26
g1
(S'PhaseRecord'
p27
(g3
t(dp28
g5
(dp29
g9
NsS'attachments'
p30
g17
sS'measured_values'
p31
NsS'measurements'
p32
NsS'docstring'
p33
Nsg12
NsS'result'
p34
Nssg18
(S'name'
p35
S'codeinfo'
p36
tp37
s(S'hello_world'
p38
g1
(S'CodeInfo'
p39
(g3
t(dp40
g5
(dp41
sg18
(g35
g33
S'sourcecode'
p42
tp43
s(g38
S'A hello world test phase.'
p44
S'@measures(\n    Measurement(\'unset_meas\'),\n    Measurement(\n        \'widget_type\').MatchesRegex(r\'.*Widget$\').Doc(\n            \'\'\'This measurement tracks the type of widgets.\'\'\'),\n    Measurement(\n        \'widget_color\').Doc(\'Color of the widget\'),\n    Measurement(\'widget_size\').InRange(1, 4))\n@plug(example=example_plug.ExamplePlug)\ndef hello_world(test, example):\n  """A hello world test phase."""\n  test.logger.info(\'Hello World!\')\n  test.measurements.widget_type = prompts.DisplayPrompt(\n      \'What\\\'s the widget type?\', text_input=True)\n  if test.measurements.widget_type == \'raise\':\n    raise Exception()\n  test.measurements.widget_color = \'Black\'\n  test.measurements.widget_size = 3\n  test.logger.info(\'Plug value: %s\', example.Increment())\n'
p45
ttRp46
(dbttRp47
(dp48
g9
I1467242167593
sg30
(dp49
sg31
(dp50
S'widget_type'
p51
S'testWidget'
p52
sS'widget_color'
p53
S'Black'
p54
sS'widget_size'
p55
I3
ssg32
(dp56
g51
g1
(S'Measurement'
p57
(g3
t(dp58
g5
(dp59
S'units'
p60
Nsg15
copenhtf.util.measurements
Outcome
p61
(I3
tRp62
sg33
NsS'dimensions'
p63
NsS'validators'
p64
g8
ssg18
(g35
tp65
s(g51
ttRp66
(dp67
g60
Nsg15
g61
(I1
tRp68
sg33
S'This measurement tracks the type of widgets.'
p69
sg63
Nsg64
(lp70
ccopy_reg
_reconstructor
p71
(copenhtf.util.validators
RegexMatcher
p72
c__builtin__
object
p73
NtRp74
(dp75
S'regex'
p76
S'.*Widget$'
p77
sS'_compiled'
p78
cre
_compile
p79
(g77
I0
tRp80
sbasbsg53
g1
(g57
(g3
t(dp81
g5
g59
sg18
g65
s(g53
ttRp82
(dp83
g60
Nsg15
g68
sg33
S'Color of the widget'
p84
sg63
Nsg64
(lp85
sbsS'unset_meas'
p86
g1
(g57
(g3
t(dp87
g5
g59
sg18
g65
s(g86
ttRp88
(dp89
g60
Nsg15
g62
sg33
Nsg63
Nsg64
(lp90
sbsg55
g1
(g57
(g3
t(dp91
g5
g59
sg18
g65
s(g55
ttRp92
(dp93
g60
Nsg15
g68
sg33
Nsg63
Nsg64
(lp94
g71
(copenhtf.util.validators
InRange
p95
g73
NtRp96
(dp97
S'minimum'
p98
I1
sS'maximum'
p99
I4
sbasbssg33
Nsg12
I1467242169964
sg34
g71
(copenhtf.exe.phase_executor
PhaseOutcome
p100
c__builtin__
tuple
p101
(copenhtf
PhaseResult
p102
(I1
tRp103
ttRp104
sbag1
(g27
(g3
t(dp105
g5
g29
sg18
g37
s(S'set_measurements'
p106
g1
(g39
(g3
t(dp107
g5
g41
sg18
g43
s(g106
S'Test phase that sets a measurement.'
p108
S'    @plugs.plug(update_kwargs=False, **monitor_plugs)\n    @measurements.measures(\n        measurements.Measurement(measurement_name).WithUnits(\n            units).WithDimensions(uom.MILLISECOND))\n    @functools.wraps(phase.func)\n    def MonitoredPhaseFunc(phase_data, *args, **kwargs):\n      # Start monitor thread, it will call monitor.func(phase_data) periodically\n      monitor_thread = _MonitorThread(\n          measurement_name, monitor, phase.extra_kwargs, phase_data,\n          poll_interval_ms)\n      monitor_thread.start()\n      try:\n        return phase(phase_data, *args, **kwargs)\n      finally:\n        monitor_thread.Kill()\n'
p109
ttRp110
(dbttRp111
(dp112
g9
I1467242169965
sg30
(dp113
sg31
(dp114
S'monitor_measurement'
p115
(lp116
(I0
I2
tp117
a(F1001.060962677002
I3
tp118
a(F2002.1219253540039
I4
tp119
a(F3003.1859874725342
I5
tp120
asS'level_all'
p121
I9
sS'level_none'
p122
I0
sS'level_some'
p123
I8
ssg32
(dp124
g115
g1
(g57
(g3
t(dp125
g5
g59
sg18
g65
s(g115
ttRp126
(dp127
g60
Nsg15
g68
sg33
Nsg63
(g71
(copenhtf.util.units
UnitDescriptor
p128
g101
(S'millisecond'
p129
S'C26'
p130
S'ms'
p131
ttRp132
tp133
sg64
(lp134
sbsS'level_all'
p135
g1
(g57
(g3
t(dp136
g5
g59
sg18
g65
s(g135
ttRp137
(dp138
g60
Nsg15
g68
sg33
Nsg63
Nsg64
(lp139
sbsS'level_none'
p140
g1
(g57
(g3
t(dp141
g5
g59
sg18
g65
s(g140
ttRp142
(dp143
g60
Nsg15
g68
sg33
Nsg63
Nsg64
(lp144
sbsS'level_some'
p145
g1
(g57
(g3
t(dp146
g5
g59
sg18
g65
s(g145
ttRp147
(dp148
g60
Nsg15
g68
sg33
Nsg63
Nsg64
(lp149
sbssg33
Nsg12
I1467242172986
sg34
g71
(g100
g101
(g103
ttRp150
sbag1
(g27
(g3
t(dp151
g5
g29
sg18
g37
s(g63
g1
(g39
(g3
t(dp152
g5
g41
sg18
g43
s(g63
NS"@measures(\n    Measurement('unset_dims').WithDimensions(units.HERTZ),\n    Measurement('dimensions').WithDimensions(units.HERTZ),\n    Measurement('lots_of_dims').WithDimensions(\n        units.HERTZ, units.SECOND, units.RADIAN))\ndef dimensions(test):\n  for dim in range(5):\n    test.measurements.dimensions[dim] = 1 << dim\n  for x, y, z in zip(range(1, 5), range(21, 25), range (101, 105)):\n    test.measurements.lots_of_dims[x, y, z] = x + y + z\n"
p153
ttRp154
(dbttRp155
(dp156
g9
I1467242172987
sg30
(dp157
sg31
(dp158
S'lots_of_dims'
p159
(lp160
(I1
I21
I101
I123
tp161
a(I2
I22
I102
I126
tp162
a(I3
I23
I103
I129
tp163
a(I4
I24
I104
I132
tp164
asg63
(lp165
(I0
I1
tp166
a(I1
I2
tp167
a(I2
I4
tp168
a(I3
I8
tp169
a(I4
I16
tp170
assg32
(dp171
g159
g1
(g57
(g3
t(dp172
g5
g59
sg18
g65
s(g159
ttRp173
(dp174
g60
Nsg15
g68
sg33
Nsg63
(g71
(g128
g101
(S'hertz'
p175
S'HTZ'
p176
S'Hz'
p177
ttRp178
g71
(g128
g101
(S'second [unit of time]'
p179
S'SEC'
p180
S's'
ttRp181
g71
(g128
g101
(S'radian'
p182
S'C81'
p183
S'rad'
p184
ttRp185
tp186
sg64
(lp187
sbsS'unset_dims'
p188
g1
(g57
(g3
t(dp189
g5
g59
sg18
g65
s(g188
ttRp190
(dp191
g60
Nsg15
g62
sg33
Nsg63
(g71
(g128
g101
(g175
g176
g177
ttRp192
tp193
sg64
(lp194
sbsg63
g1
(g57
(g3
t(dp195
g5
g59
sg18
g65
s(g63
ttRp196
(dp197
g60
Nsg15
g68
sg33
Nsg63
(g71
(g128
g101
(g175
g176
g177
ttRp198
tp199
sg64
(lp200
sbssg33
Nsg12
I1467242172988
sg34
g71
(g100
g101
(g103
ttRp201
sbag1
(g27
(g3
t(dp202
g5
g29
sg18
g37
s(g30
g1
(g39
(g3
t(dp203
g5
g41
sg18
g43
s(g30
NS"def attachments(test):\n  test.Attach('test_attachment', 'This is test attachment data.')\n  test.AttachFromFile('example_attachment.txt')\n"
p204
ttRp205
(dbttRp206
(dp207
g9
I1467242172988
sg30
(dp208
S'test_attachment'
p209
g71
(copenhtf.io.test_record
Attachment
p210
g101
(S'This is test attachment data.'
p211
NttRp212
sS'example_attachment.txt'
p213
g71
(g210
g101
(S'This is a text file attachment.\n'
p214
S'text/plain'
p215
ttRp216
ssg31
(dp217
sg32
(dp218
sg33
Nsg12
I1467242172997
sg34
g71
(g100
g101
(g103
ttRp219
sbasg9
I1467242167592
sg11
(lp220
sg12
I1467242173004
sg13
g1
(g39
(g3
t(dp221
g5
g41
sg18
g43
s(S'all_the_things.py'
p222
S'Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py --config=example_config.yaml'
p223
S'# Copyright 2014 Google Inc. All Rights Reserved.\n\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n"""Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py --config=example_config.yaml\n"""\n\nimport json\nimport os\nimport time\n\nimport example_plug\nimport openhtf\nimport openhtf.io.output as output\n\nfrom openhtf.io.output import json_factory\nfrom openhtf.io.output import mfg_inspector\nfrom openhtf.names import *\n# Uncomment for mfg-inspector output, requires setup.py build_proto.\n#from openhtf.io.output import mfg_inspector\nfrom openhtf.util import units\n\n\n@plug(example=example_plug.ExamplePlug)\ndef example_monitor(example):\n  return example.Increment()\n'
p224
ttRp225
(dbsg14
(lp226
g71
(copenhtf.util.logs
LogRecord
p227
g101
(I20
S'openhtf.test_record'
p228
S'all_the_things.py'
p229
I53
I1467242167594
VHello World!
p230
ttRp231
ag71
(g227
g101
(I20
g228
g229
I60
I1467242169945
VPlug value: 1
p232
ttRp233
ag71
(g227
g101
(I20
g228
S'all_the_things.py'
p234
I96
I1467242172998
VRunning teardown
p235
ttRp236
ag71
(g227
g101
(I20
S'openhtf.test_record.plugs.ExamplePlug'
p237
S'example_plug.py'
p238
I79
I1467242172999
VTearing down <ExamplePlug: 5>
p239
ttRp240
ag71
(g227
g101
(I10
g228
S'test_state.py'
p241
I164
I1467242173003
VFinishing test execution with outcome FAIL.
p242
ttRp243
asg15
copenhtf.io.test_record
Outcome
p244
(I2
tRp245
sg16
(dp246
S'test_description'
p247
S'OpenHTF Example Test'
p248
sS'config'
p249
(dp250
S'example_plug_increment'
p251
I1
sg20
g23
ssS'test_version'
p252
S'1.0.0'
p253
sS'test_name'
p254
S'MyTest'
p255
ssb.