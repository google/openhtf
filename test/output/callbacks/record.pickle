ccopy_reg
_reconstructor
p1
(copenhtf.core.test_record
TestRecord
p2
c__builtin__
object
p3
NtRp4
(dp5
S'phases'
p6
(lp7
g1
(copenhtf.core.test_record
PhaseRecord
p8
g3
NtRp9
(dp10
S'start_time_millis'
p11
I1480507451503
sS'attachments'
p12
(dp13
sS'measurements'
p14
(dp15
sS'end_time_millis'
p16
I1480507454324
sS'result'
p17
g1
(copenhtf.core.phase_executor
PhaseOutcome
p18
c__builtin__
tuple
p19
(copenhtf
PhaseResult
p20
(I1
tRp21
ttRp22
sS'codeinfo'
p23
g1
(copenhtf.core.test_record
CodeInfo
p24
g3
NtRp25
(dp26
S'docstring'
p27
S'Test start trigger that prompts the user for a DUT ID.'
p28
sS'name'
p29
S'trigger_phase'
p30
sS'sourcecode'
p31
S'  @PhaseOptions(timeout_s=timeout_s)\n  @plugs.plug(prompts=UserInput)\n  def trigger_phase(test, prompts):\n    """Test start trigger that prompts the user for a DUT ID."""\n    test.test_record.dut_id = prompts.prompt(message=message, text_input=True,\n                                             timeout_s=timeout_s)\n'
p32
sbsg29
g30
sbag1
(g8
g3
NtRp33
(dp34
g11
I1480507454511
sg12
(dp35
sg14
(dp36
S'widget_type'
p37
g1
(copenhtf.core.measurements
Measurement
p38
g3
NtRp39
(dp40
g29
g37
sg27
S'This measurement tracks the type of widgets.'
p41
sS'_notification_cb'
p42
NsS'validators'
p43
(lp44
g1
(copenhtf.util.validators
RegexMatcher
p45
g3
NtRp46
(dp47
S'regex'
p48
S'.*Widget$'
p49
sS'_compiled'
p50
cre
_compile
p51
(g49
I0
tRp52
sbasS'units'
p53
NsS'outcome'
p54
copenhtf.core.measurements
Outcome
p55
(I2
tRp56
sS'measured_value'
p57
g1
(copenhtf.core.measurements
MeasuredValue
p58
g3
NtRp59
(dp60
S'is_value_set'
p61
I01
sg29
g37
sS'stored_value'
p62
S''
sbsS'dimensions'
p63
NsbsS'widget_color'
p64
g1
(g38
g3
NtRp65
(dp66
g29
g64
sg27
S'Color of the widget'
p67
sg42
Nsg43
(lp68
sg53
Nsg54
g55
(I1
tRp69
sg57
g1
(g58
g3
NtRp70
(dp71
g61
I01
sg29
g64
sg62
S'Black'
p72
sbsg63
NsbsS'unset_meas'
p73
g1
(g38
g3
NtRp74
(dp75
g29
g73
sg27
Nsg42
Nsg43
(lp76
sg53
Nsg54
g55
(I3
tRp77
sg57
g1
(g58
g3
NtRp78
(dp79
g61
I00
sg29
g73
sg62
Nsbsg63
NsbsS'widget_size'
p80
g1
(g38
g3
NtRp81
(dp82
g29
g80
sg27
Nsg42
Nsg43
(lp83
g1
(copenhtf.util.validators
InRange
p84
g3
NtRp85
(dp86
S'minimum'
p87
I1
sS'maximum'
p88
I4
sbasg53
Nsg54
g69
sg57
g1
(g58
g3
NtRp89
(dp90
g61
I01
sg29
g80
sg62
I3
sbsg63
Nsbssg16
I1480507460437
sg17
g1
(g18
g19
(g21
ttRp91
sg23
g1
(g24
g3
NtRp92
(dp93
g27
S'A hello world test phase.'
p94
sg29
S'hello_world'
p95
sg31
S'@htf.measures(\n    htf.Measurement(\'unset_meas\'),\n    htf.Measurement(\n        \'widget_type\').matches_regex(r\'.*Widget$\').doc(\n            \'\'\'This measurement tracks the type of widgets.\'\'\'),\n    htf.Measurement(\n        \'widget_color\').doc(\'Color of the widget\'),\n    htf.Measurement(\'widget_size\').in_range(1, 4))\n@htf.plug(example=example_plug.ExamplePlug)\n@htf.plug(prompts=user_input.UserInput)\ndef hello_world(test, example, prompts):\n  """A hello world test phase."""\n  test.logger.info(\'Hello World!\')\n  test.measurements.widget_type = prompts.prompt(\n      \'What\\\'s the widget type?\', text_input=True)\n  if test.measurements.widget_type == \'raise\':\n    raise Exception()\n  test.measurements.widget_color = \'Black\'\n  test.measurements.widget_size = 3\n  test.logger.info(\'Plug value: %s\', example.increment())\n'
p96
sbsg29
g95
sbag1
(g8
g3
NtRp97
(dp98
g11
I1480507460438
sg12
(dp99
sg14
(dp100
S'monitor_measurement'
p101
g1
(g38
g3
NtRp102
(dp103
g29
g101
sg27
Nsg42
Nsg43
(lp104
sg53
g1
(copenhtf.util.units
UnitDescriptor
p105
g19
(S'None'
p106
NNttRp107
sg54
g69
sg57
g1
(copenhtf.core.measurements
DimensionedMeasuredValue
p108
g3
NtRp109
(dp110
S'value_dict'
p111
ccollections
OrderedDict
p112
((lp113
(lp114
(F200.53410530090332
tp115
aI1
aa(lp116
(F1000.6740093231201
tp117
aI2
aa(lp118
(F2000.9090900421143
tp119
aI3
aa(lp120
(F3000.8881092071533
tp121
aI4
aatRp122
sS'notify_value_set'
p123
Nsg29
g101
sS'num_dimensions'
p124
I1
sbsg63
(g1
(g105
g19
(S'millisecond'
p125
S'C26'
p126
S'ms'
p127
ttRp128
tp129
sbsS'level_all'
p130
g1
(g38
g3
NtRp131
(dp132
g29
g130
sg27
Nsg42
Nsg43
(lp133
sg53
Nsg54
g69
sg57
g1
(g58
g3
NtRp134
(dp135
g61
I01
sg29
g130
sg62
I9
sbsg63
NsbsS'level_none'
p136
g1
(g38
g3
NtRp137
(dp138
g29
g136
sg27
Nsg42
Nsg43
(lp139
sg53
Nsg54
g69
sg57
g1
(g58
g3
NtRp140
(dp141
g61
I01
sg29
g136
sg62
I0
sbsg63
NsbsS'level_some'
p142
g1
(g38
g3
NtRp143
(dp144
g29
g142
sg27
Nsg42
Nsg43
(lp145
sg53
Nsg54
g69
sg57
g1
(g58
g3
NtRp146
(dp147
g61
I01
sg29
g142
sg62
I8
sbsg63
Nsbssg16
I1480507463458
sg17
g1
(g18
g19
(g21
ttRp148
sg23
g1
(g24
g3
NtRp149
(dp150
g27
S'Test phase that sets a measurement.'
p151
sg29
S'set_measurements'
p152
sg31
S'    @openhtf.PhaseOptions(requires_state=True)\n    @plugs.plug(update_kwargs=False, **monitor_plugs)\n    @measurements.measures(\n        measurements.Measurement(measurement_name).with_units(\n            units).with_dimensions(uom.MILLISECOND))\n    @functools.wraps(phase_desc.func)\n    def monitored_phase_func(test_state, *args, **kwargs):\n      # Start monitor thread, it will run monitor_desc periodically.\n      monitor_thread = _MonitorThread(\n          measurement_name, monitor_desc, phase_desc.extra_kwargs, test_state,\n          poll_interval_ms)\n      monitor_thread.start()\n      try:\n        return phase_desc(test_state, *args, **kwargs)\n      finally:\n        monitor_thread.kill()\n'
p153
sbsg29
g152
sbag1
(g8
g3
NtRp154
(dp155
g11
I1480507463460
sg12
(dp156
sg14
(dp157
S'lots_of_dims'
p158
g1
(g38
g3
NtRp159
(dp160
g29
g158
sg27
Nsg42
Nsg43
(lp161
sg53
Nsg54
g69
sg57
g1
(g108
g3
NtRp162
(dp163
g111
g112
((lp164
(lp165
(I1
I21
I101
tp166
aI123
aa(lp167
(I2
I22
I102
tp168
aI126
aa(lp169
(I3
I23
I103
tp170
aI129
aa(lp171
(I4
I24
I104
tp172
aI132
aatRp173
sg123
Nsg29
g158
sg124
I3
sbsg63
(g1
(g105
g19
(S'hertz'
p174
S'HTZ'
p175
S'Hz'
p176
ttRp177
g1
(g105
g19
(S'second [unit of time]'
p178
S'SEC'
p179
S's'
ttRp180
g1
(g105
g19
(S'radian'
p181
S'C81'
p182
S'rad'
p183
ttRp184
tp185
sbsS'unset_dims'
p186
g1
(g38
g3
NtRp187
(dp188
g29
g186
sg27
Nsg42
Nsg43
(lp189
sg53
Nsg54
g77
sg57
g1
(g108
g3
NtRp190
(dp191
g111
g112
((ltRp192
sg123
Nsg29
g186
sg124
I1
sbsg63
(g1
(g105
g19
(g174
g175
g176
ttRp193
tp194
sbsg63
g1
(g38
g3
NtRp195
(dp196
g29
g63
sg27
Nsg42
Nsg43
(lp197
sg53
Nsg54
g69
sg57
g1
(g108
g3
NtRp198
(dp199
g111
g112
((lp200
(lp201
(I0
tp202
aI1
aa(lp203
(I1
tp204
aI2
aa(lp205
(I2
tp206
aI4
aa(lp207
(I3
tp208
aI8
aa(lp209
(I4
tp210
aI16
aatRp211
sg123
Nsg29
g63
sg124
I1
sbsg63
(g1
(g105
g19
(g174
g175
g176
ttRp212
tp213
sbssg16
I1480507463461
sg17
g1
(g18
g19
(g21
ttRp214
sg23
g1
(g24
g3
NtRp215
(dp216
g27
Nsg29
g63
sg31
S"@htf.measures(\n    htf.Measurement('unset_dims').with_dimensions(units.HERTZ),\n    htf.Measurement('dimensions').with_dimensions(units.HERTZ),\n    htf.Measurement('lots_of_dims').with_dimensions(\n        units.HERTZ, units.SECOND, units.RADIAN))\ndef dimensions(test):\n  for dim in range(5):\n    test.measurements.dimensions[dim] = 1 << dim\n  for x, y, z in zip(range(1, 5), range(21, 25), range (101, 105)):\n    test.measurements.lots_of_dims[x, y, z] = x + y + z\n"
p217
sbsg29
g63
sbag1
(g8
g3
NtRp218
(dp219
g11
I1480507463461
sg12
(dp220
S'test_attachment'
p221
g1
(copenhtf.core.test_record
Attachment
p222
g19
(S'This is test attachment data.'
p223
NttRp224
sS'example_attachment.txt'
p225
g1
(g222
g19
(S'This is a text file attachment.\n'
p226
S'text/plain'
p227
ttRp228
ssg14
(dp229
sg16
I1480507463469
sg17
g1
(g18
g19
(g21
ttRp230
sg23
g1
(g24
g3
NtRp231
(dp232
g27
Nsg29
g12
sg31
S"def attachments(test):\n  test.attach('test_attachment', 'This is test attachment data.')\n  test.attach_from_file('example_attachment.txt')\n"
p233
sbsg29
g12
sbasg11
I1480507454324
sS'outcome_details'
p234
(lp235
sg16
I1480507463469
sS'station_id'
p236
S'fahhem.mtv.corp.google.com'
p237
sS'dut_id'
p238
S'TestDUT'
p239
sS'code_info'
p240
g1
(g24
g3
NtRp241
(dp242
g27
S'Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py'
p243
sg29
S'all_the_things.py'
p244
sg31
S'# Copyright 2014 Google Inc. All Rights Reserved.\n\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n"""Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py\n"""\n\nimport json\nimport os\nimport time\n\nimport openhtf as htf\nfrom openhtf.util import units\nfrom openhtf.plugs import user_input\nfrom openhtf.output import callbacks\nfrom openhtf.output.callbacks import json_factory\nfrom openhtf.output.callbacks import mfg_inspector\n\nimport example_plug\n\n\n@htf.plug(example=example_plug.ExamplePlug)\ndef example_monitor(example):\n  time.sleep(.2)\n  return example.increment()\n'
p245
sbsS'pending_phases'
p246
(lp247
sS'log_records'
p248
(lp249
g1
(copenhtf.util.logs
LogRecord
p250
g19
(I20
S'openhtf.test_record.56827:1480507451423:140023102096848'
p251
S'all_the_things.py'
p252
I53
I1480507454512
VHello World!
p253
ttRp254
ag1
(g250
g19
(I20
g251
g252
I60
I1480507460390
VPlug value: 0
p255
ttRp256
ag1
(g250
g19
(I10
g251
S'test_state.py'
p257
I300
I1480507463469
VFinishing test execution normally with outcome FAIL.
p258
ttRp259
asg54
copenhtf.core.test_record
Outcome
p260
(I2
tRp261
sS'metadata'
p262
(dp263
S'test_name'
p264
S'MyTest'
p265
sS'config'
p266
(dp267
S'enable_station_discovery'
p268
I01
sS'station_api_port'
p269
I8888
sS'allow_unset_measurements'
p270
I00
sS'teardown_timeout_s'
p271
I3
sS'example_plug_increment_size'
p272
I1
sS'station_api_bind_address'
p273
S'0.0.0.0'
p274
sg236
g237
sS'station_discovery_string'
p275
S'OPENHTF_DISCOVERY'
p276
sS'max_history_size_mb'
p277
I256
ssS'test_version'
p278
S'1.0.0'
p279
sS'test_description'
p280
S'OpenHTF Example Test'
p281
ssb.