ccopy_reg
_reconstructor
p1
(copenhtf.core.test_record
TestRecord
p2
c__builtin__
object
p3
NtRp4
(dp5
S'phases'
p6
(lp7
g1
(copenhtf.core.test_record
PhaseRecord
p8
g3
NtRp9
(dp10
S'start_time_millis'
p11
I1471981967850
sS'attachments'
p12
(dp13
sS'measurements'
p14
(dp15
S'widget_type'
p16
g1
(copenhtf.core.measurements
Measurement
p17
g3
NtRp18
(dp19
S'name'
p20
g16
sS'docstring'
p21
S'This measurement tracks the type of widgets.'
p22
sS'_notification_cb'
p23
NsS'validators'
p24
(lp25
g1
(copenhtf.util.validators
RegexMatcher
p26
g3
NtRp27
(dp28
S'regex'
p29
S'.*Widget$'
p30
sS'_compiled'
p31
cre
_compile
p32
(g30
I0
tRp33
sbasS'units'
p34
NsS'outcome'
p35
copenhtf.core.measurements
Outcome
p36
(I1
tRp37
sS'measured_value'
p38
g1
(copenhtf.core.measurements
MeasuredValue
p39
g3
NtRp40
(dp41
S'is_value_set'
p42
I01
sg20
g16
sS'stored_value'
p43
S'TestWidget'
p44
sbsS'dimensions'
p45
NsbsS'widget_color'
p46
g1
(g17
g3
NtRp47
(dp48
g20
g46
sg21
S'Color of the widget'
p49
sg23
Nsg24
(lp50
sg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp51
(dp52
g42
I01
sg20
g46
sg43
S'Black'
p53
sbsg45
NsbsS'unset_meas'
p54
g1
(g17
g3
NtRp55
(dp56
g20
g54
sg21
Nsg23
Nsg24
(lp57
sg34
Nsg35
g36
(I3
tRp58
sg38
g1
(g39
g3
NtRp59
(dp60
g42
I00
sg20
g54
sg43
Nsbsg45
NsbsS'widget_size'
p61
g1
(g17
g3
NtRp62
(dp63
g20
g61
sg21
Nsg23
Nsg24
(lp64
g1
(copenhtf.util.validators
InRange
p65
g3
NtRp66
(dp67
S'minimum'
p68
I1
sS'maximum'
p69
I4
sbasg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp70
(dp71
g42
I01
sg20
g61
sg43
I3
sbsg45
NsbssS'end_time_millis'
p72
I1471981972676
sS'result'
p73
g1
(copenhtf.core.phase_executor
PhaseOutcome
p74
c__builtin__
tuple
p75
(copenhtf
PhaseResult
p76
(I1
tRp77
ttRp78
sS'codeinfo'
p79
g1
(copenhtf.core.test_record
CodeInfo
p80
g3
NtRp81
(dp82
g21
S'A hello world test phase.'
p83
sg20
S'hello_world'
p84
sS'sourcecode'
p85
S'@htf.measures(\n    htf.Measurement(\'unset_meas\'),\n    htf.Measurement(\n        \'widget_type\').matches_regex(r\'.*Widget$\').doc(\n            \'\'\'This measurement tracks the type of widgets.\'\'\'),\n    htf.Measurement(\n        \'widget_color\').doc(\'Color of the widget\'),\n    htf.Measurement(\'widget_size\').in_range(1, 4))\n@htf.plug(example=example_plug.ExamplePlug)\n@htf.plug(prompts=user_input.UserInput)\ndef hello_world(test, example, prompts):\n  """A hello world test phase."""\n  test.logger.info(\'Hello World!\')\n  test.measurements.widget_type = prompts.prompt(\n      \'What\\\'s the widget type?\', text_input=True)\n  if test.measurements.widget_type == \'raise\':\n    raise Exception()\n  test.measurements.widget_color = \'Black\'\n  test.measurements.widget_size = 3\n  test.logger.info(\'Plug value: %s\', example.increment())\n'
p86
sbsg20
g84
sbag1
(g8
g3
NtRp87
(dp88
g11
I1471981972678
sg12
(dp89
sg14
(dp90
S'monitor_measurement'
p91
g1
(g17
g3
NtRp92
(dp93
g20
g91
sg21
Nsg23
Nsg24
(lp94
sg34
g1
(copenhtf.util.units
UnitDescriptor
p95
g75
(S'None'
p96
NNttRp97
sg35
g37
sg38
g1
(copenhtf.core.measurements
DimensionedMeasuredValue
p98
g3
NtRp99
(dp100
S'value_dict'
p101
ccollections
OrderedDict
p102
((lp103
(lp104
(F200.88601112365723
tp105
aI1
aa(lp106
(F1000.6160736083984
tp107
aI2
aa(lp108
(F2000.6470680236816
tp109
aI3
aa(lp110
(F3000.6759166717529
tp111
aI4
aatRp112
sS'notify_value_set'
p113
Nsg20
g91
sS'num_dimensions'
p114
I1
sbsg45
(g1
(g95
g75
(S'millisecond'
p115
S'C26'
p116
S'ms'
p117
ttRp118
tp119
sbsS'level_all'
p120
g1
(g17
g3
NtRp121
(dp122
g20
g120
sg21
Nsg23
Nsg24
(lp123
sg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp124
(dp125
g42
I01
sg20
g120
sg43
I9
sbsg45
NsbsS'level_none'
p126
g1
(g17
g3
NtRp127
(dp128
g20
g126
sg21
Nsg23
Nsg24
(lp129
sg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp130
(dp131
g42
I01
sg20
g126
sg43
I0
sbsg45
NsbsS'level_some'
p132
g1
(g17
g3
NtRp133
(dp134
g20
g132
sg21
Nsg23
Nsg24
(lp135
sg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp136
(dp137
g42
I01
sg20
g132
sg43
I8
sbsg45
Nsbssg72
I1471981975700
sg73
g1
(g74
g75
(g77
ttRp138
sg79
g1
(g80
g3
NtRp139
(dp140
g21
S'Test phase that sets a measurement.'
p141
sg20
S'set_measurements'
p142
sg85
S'    @openhtf.PhaseOptions(requires_state=True)\n    @plugs.plug(update_kwargs=False, **monitor_plugs)\n    @measurements.measures(\n        measurements.Measurement(measurement_name).with_units(\n            units).with_dimensions(uom.MILLISECOND))\n    @functools.wraps(phase_desc.func)\n    def monitored_phase_func(test_state, *args, **kwargs):\n      # Start monitor thread, it will run monitor_desc periodically.\n      monitor_thread = _MonitorThread(\n          measurement_name, monitor_desc, phase_desc.extra_kwargs, test_state,\n          poll_interval_ms)\n      monitor_thread.start()\n      try:\n        return phase_desc(test_state, *args, **kwargs)\n      finally:\n        monitor_thread.kill()\n'
p143
sbsg20
g142
sbag1
(g8
g3
NtRp144
(dp145
g11
I1471981975702
sg12
(dp146
sg14
(dp147
S'lots_of_dims'
p148
g1
(g17
g3
NtRp149
(dp150
g20
g148
sg21
Nsg23
Nsg24
(lp151
sg34
Nsg35
g37
sg38
g1
(g98
g3
NtRp152
(dp153
g101
g102
((lp154
(lp155
(I1
I21
I101
tp156
aI123
aa(lp157
(I2
I22
I102
tp158
aI126
aa(lp159
(I3
I23
I103
tp160
aI129
aa(lp161
(I4
I24
I104
tp162
aI132
aatRp163
sg113
Nsg20
g148
sg114
I3
sbsg45
(g1
(g95
g75
(S'hertz'
p164
S'HTZ'
p165
S'Hz'
p166
ttRp167
g1
(g95
g75
(S'second [unit of time]'
p168
S'SEC'
p169
S's'
ttRp170
g1
(g95
g75
(S'radian'
p171
S'C81'
p172
S'rad'
p173
ttRp174
tp175
sbsS'unset_dims'
p176
g1
(g17
g3
NtRp177
(dp178
g20
g176
sg21
Nsg23
Nsg24
(lp179
sg34
Nsg35
g58
sg38
g1
(g98
g3
NtRp180
(dp181
g101
g102
((ltRp182
sg113
Nsg20
g176
sg114
I1
sbsg45
(g1
(g95
g75
(g164
g165
g166
ttRp183
tp184
sbsg45
g1
(g17
g3
NtRp185
(dp186
g20
g45
sg21
Nsg23
Nsg24
(lp187
sg34
Nsg35
g37
sg38
g1
(g98
g3
NtRp188
(dp189
g101
g102
((lp190
(lp191
(I0
tp192
aI1
aa(lp193
(I1
tp194
aI2
aa(lp195
(I2
tp196
aI4
aa(lp197
(I3
tp198
aI8
aa(lp199
(I4
tp200
aI16
aatRp201
sg113
Nsg20
g45
sg114
I1
sbsg45
(g1
(g95
g75
(g164
g165
g166
ttRp202
tp203
sbssg72
I1471981975704
sg73
g1
(g74
g75
(g77
ttRp204
sg79
g1
(g80
g3
NtRp205
(dp206
g21
Nsg20
g45
sg85
S"@htf.measures(\n    htf.Measurement('unset_dims').with_dimensions(units.HERTZ),\n    htf.Measurement('dimensions').with_dimensions(units.HERTZ),\n    htf.Measurement('lots_of_dims').with_dimensions(\n        units.HERTZ, units.SECOND, units.RADIAN))\ndef dimensions(test):\n  for dim in range(5):\n    test.measurements.dimensions[dim] = 1 << dim\n  for x, y, z in zip(range(1, 5), range(21, 25), range (101, 105)):\n    test.measurements.lots_of_dims[x, y, z] = x + y + z\n"
p207
sbsg20
g45
sbag1
(g8
g3
NtRp208
(dp209
g11
I1471981975705
sg12
(dp210
S'test_attachment'
p211
g1
(copenhtf.core.test_record
Attachment
p212
g75
(S'This is test attachment data.'
p213
NttRp214
sS'example_attachment.txt'
p215
g1
(g212
g75
(S'This is a text file attachment.\n'
p216
S'text/plain'
p217
ttRp218
ssg14
(dp219
sg72
I1471981975721
sg73
g1
(g74
g75
(g77
ttRp220
sg79
g1
(g80
g3
NtRp221
(dp222
g21
Nsg20
g12
sg85
S"def attachments(test):\n  test.attach('test_attachment', 'This is test attachment data.')\n  test.attach_from_file('example_attachment.txt')\n"
p223
sbsg20
g12
sbasg11
I1471981967848
sS'outcome_details'
p224
(lp225
sg72
I1471981975722
sS'station_id'
p226
S'jethier.mtv.corp.google.com'
p227
sS'dut_id'
p228
S'TestDUT'
p229
sS'code_info'
p230
g1
(g80
g3
NtRp231
(dp232
g21
S'Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py'
p233
sg20
S'all_the_things.py'
p234
sg85
S'# Copyright 2014 Google Inc. All Rights Reserved.\n\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n"""Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py\n"""\n\nimport json\nimport os\nimport time\n\nimport openhtf as htf\nfrom openhtf.output.callbacks import OutputToFile\nfrom openhtf.output.callbacks.json_factory import OutputToJSON\n# Uncomment the following line for Testrun output.\n# from openhtf.output.callbacks.mfg_inspector import OutputToTestRunProto\nfrom openhtf.plugs import user_input\nfrom openhtf.util import units\n\nimport example_plug\n\n\n@htf.plug(example=example_plug.ExamplePlug)\ndef example_monitor(example):\n  time.sleep(.2)\n  return example.increment()\n'
p235
sbsS'log_records'
p236
(lp237
g1
(copenhtf.util.logs
LogRecord
p238
g75
(I20
S'openhtf.test_record.25870:1471981964613:140039026113872'
p239
S'all_the_things.py'
p240
I54
I1471981967851
VHello World!
p241
ttRp242
ag1
(g238
g75
(I20
g239
g240
I61
I1471981972631
VPlug value: 0
p243
ttRp244
ag1
(g238
g75
(I10
g239
S'test_state.py'
p245
I279
I1471981975721
VFinishing test execution normally with outcome FAIL.
p246
ttRp247
asg35
copenhtf.core.test_record
Outcome
p248
(I2
tRp249
sS'metadata'
p250
(dp251
S'test_name'
p252
S'MyTest'
p253
sS'config'
p254
(dp255
S'enable_station_discovery'
p256
I01
sS'station_api_port'
p257
I8888
sS'allow_unset_measurements'
p258
I00
sS'teardown_timeout_s'
p259
I3
sS'example_plug_increment_size'
p260
I1
sS'station_api_bind_address'
p261
S'0.0.0.0'
p262
sg226
g227
sS'station_discovery_string'
p263
S'OPENHTF_DISCOVERY'
p264
sS'max_history_size_mb'
p265
I256
ssS'test_version'
p266
S'1.0.0'
p267
sS'test_description'
p268
S'OpenHTF Example Test'
p269
ssb.