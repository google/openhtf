{
  "code_info": {
    "docstring": "Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py", 
    "name": "all_the_things.py", 
    "sourcecode": "# Copyright 2014 Google Inc. All Rights Reserved.\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py\n\"\"\"\n\nimport json\nimport os\nimport time\n\nimport openhtf as htf\nfrom openhtf.util import units\nfrom openhtf.plugs import user_input\nfrom openhtf.output import callbacks\nfrom openhtf.output.callbacks import json_factory\nfrom openhtf.output.callbacks import mfg_inspector\n\nimport example_plug\n\n\n@htf.plug(example=example_plug.ExamplePlug)\ndef example_monitor(example):\n  time.sleep(.2)\n  return example.increment()\n"
  }, 
  "dut_id": "TestDUT", 
  "end_time_millis": 1480507463469, 
  "log_records": [
    {
      "level": 20, 
      "lineno": 53, 
      "logger_name": "openhtf.test_record.56827:1480507451423:140023102096848", 
      "message": "Hello World!", 
      "source": "all_the_things.py", 
      "timestamp_millis": 1480507454512
    }, 
    {
      "level": 20, 
      "lineno": 60, 
      "logger_name": "openhtf.test_record.56827:1480507451423:140023102096848", 
      "message": "Plug value: 0", 
      "source": "all_the_things.py", 
      "timestamp_millis": 1480507460390
    }, 
    {
      "level": 10, 
      "lineno": 300, 
      "logger_name": "openhtf.test_record.56827:1480507451423:140023102096848", 
      "message": "Finishing test execution normally with outcome FAIL.", 
      "source": "test_state.py", 
      "timestamp_millis": 1480507463469
    }
  ], 
  "metadata": {
    "config": {
      "allow_unset_measurements": false, 
      "enable_station_discovery": true, 
      "example_plug_increment_size": 1, 
      "max_history_size_mb": 256, 
      "station_api_bind_address": "0.0.0.0", 
      "station_api_port": 8888, 
      "station_discovery_string": "OPENHTF_DISCOVERY", 
      "station_id": "fahhem.mtv.corp.google.com", 
      "teardown_timeout_s": 3
    }, 
    "test_description": "OpenHTF Example Test", 
    "test_name": "MyTest", 
    "test_version": "1.0.0"
  }, 
  "outcome": "FAIL", 
  "outcome_details": [], 
  "pending_phases": [], 
  "phases": [
    {
      "attachments": {}, 
      "codeinfo": {
        "docstring": "Test start trigger that prompts the user for a DUT ID.", 
        "name": "trigger_phase", 
        "sourcecode": "  @PhaseOptions(timeout_s=timeout_s)\n  @plugs.plug(prompts=UserInput)\n  def trigger_phase(test, prompts):\n    \"\"\"Test start trigger that prompts the user for a DUT ID.\"\"\"\n    test.test_record.dut_id = prompts.prompt(message=message, text_input=True,\n                                             timeout_s=timeout_s)\n"
      }, 
      "end_time_millis": 1480507454324, 
      "measurements": {}, 
      "name": "trigger_phase", 
      "result": {
        "phase_result": "CONTINUE"
      }, 
      "start_time_millis": 1480507451503
    }, 
    {
      "attachments": {}, 
      "codeinfo": {
        "docstring": "A hello world test phase.", 
        "name": "hello_world", 
        "sourcecode": "@htf.measures(\n    htf.Measurement('unset_meas'),\n    htf.Measurement(\n        'widget_type').matches_regex(r'.*Widget$').doc(\n            '''This measurement tracks the type of widgets.'''),\n    htf.Measurement(\n        'widget_color').doc('Color of the widget'),\n    htf.Measurement('widget_size').in_range(1, 4))\n@htf.plug(example=example_plug.ExamplePlug)\n@htf.plug(prompts=user_input.UserInput)\ndef hello_world(test, example, prompts):\n  \"\"\"A hello world test phase.\"\"\"\n  test.logger.info('Hello World!')\n  test.measurements.widget_type = prompts.prompt(\n      'What\\'s the widget type?', text_input=True)\n  if test.measurements.widget_type == 'raise':\n    raise Exception()\n  test.measurements.widget_color = 'Black'\n  test.measurements.widget_size = 3\n  test.logger.info('Plug value: %s', example.increment())\n"
      }, 
      "end_time_millis": 1480507460437, 
      "measurements": {
        "unset_meas": {
          "name": "unset_meas", 
          "outcome": "UNSET"
        }, 
        "widget_color": {
          "docstring": "Color of the widget", 
          "measured_value": "Black", 
          "name": "widget_color", 
          "outcome": "PASS"
        }, 
        "widget_size": {
          "measured_value": 3, 
          "name": "widget_size", 
          "outcome": "PASS", 
          "validators": [
            "1 <= x <= 4"
          ]
        }, 
        "widget_type": {
          "docstring": "This measurement tracks the type of widgets.", 
          "measured_value": "", 
          "name": "widget_type", 
          "outcome": "FAIL", 
          "validators": [
            "'x' matches /.*Widget$/"
          ]
        }
      }, 
      "name": "hello_world", 
      "result": {
        "phase_result": "CONTINUE"
      }, 
      "start_time_millis": 1480507454511
    }, 
    {
      "attachments": {}, 
      "codeinfo": {
        "docstring": "Test phase that sets a measurement.", 
        "name": "set_measurements", 
        "sourcecode": "    @openhtf.PhaseOptions(requires_state=True)\n    @plugs.plug(update_kwargs=False, **monitor_plugs)\n    @measurements.measures(\n        measurements.Measurement(measurement_name).with_units(\n            units).with_dimensions(uom.MILLISECOND))\n    @functools.wraps(phase_desc.func)\n    def monitored_phase_func(test_state, *args, **kwargs):\n      # Start monitor thread, it will run monitor_desc periodically.\n      monitor_thread = _MonitorThread(\n          measurement_name, monitor_desc, phase_desc.extra_kwargs, test_state,\n          poll_interval_ms)\n      monitor_thread.start()\n      try:\n        return phase_desc(test_state, *args, **kwargs)\n      finally:\n        monitor_thread.kill()\n"
      }, 
      "end_time_millis": 1480507463458, 
      "measurements": {
        "level_all": {
          "measured_value": 9, 
          "name": "level_all", 
          "outcome": "PASS"
        }, 
        "level_none": {
          "measured_value": 0, 
          "name": "level_none", 
          "outcome": "PASS"
        }, 
        "level_some": {
          "measured_value": 8, 
          "name": "level_some", 
          "outcome": "PASS"
        }, 
        "monitor_measurement": {
          "dimensions": [
            {
              "code": "C26", 
              "name": "millisecond", 
              "suffix": "ms"
            }
          ], 
          "measured_value": [
            [
              200.53410530090332, 
              1
            ], 
            [
              1000.6740093231201, 
              2
            ], 
            [
              2000.9090900421143, 
              3
            ], 
            [
              3000.8881092071533, 
              4
            ]
          ], 
          "name": "monitor_measurement", 
          "outcome": "PASS", 
          "units": {
            "code": null, 
            "name": "None", 
            "suffix": null
          }
        }
      }, 
      "name": "set_measurements", 
      "result": {
        "phase_result": "CONTINUE"
      }, 
      "start_time_millis": 1480507460438
    }, 
    {
      "attachments": {}, 
      "codeinfo": {
        "docstring": null, 
        "name": "dimensions", 
        "sourcecode": "@htf.measures(\n    htf.Measurement('unset_dims').with_dimensions(units.HERTZ),\n    htf.Measurement('dimensions').with_dimensions(units.HERTZ),\n    htf.Measurement('lots_of_dims').with_dimensions(\n        units.HERTZ, units.SECOND, units.RADIAN))\ndef dimensions(test):\n  for dim in range(5):\n    test.measurements.dimensions[dim] = 1 << dim\n  for x, y, z in zip(range(1, 5), range(21, 25), range (101, 105)):\n    test.measurements.lots_of_dims[x, y, z] = x + y + z\n"
      }, 
      "end_time_millis": 1480507463461, 
      "measurements": {
        "dimensions": {
          "dimensions": [
            {
              "code": "HTZ", 
              "name": "hertz", 
              "suffix": "Hz"
            }
          ], 
          "measured_value": [
            [
              0, 
              1
            ], 
            [
              1, 
              2
            ], 
            [
              2, 
              4
            ], 
            [
              3, 
              8
            ], 
            [
              4, 
              16
            ]
          ], 
          "name": "dimensions", 
          "outcome": "PASS"
        }, 
        "lots_of_dims": {
          "dimensions": [
            {
              "code": "HTZ", 
              "name": "hertz", 
              "suffix": "Hz"
            }, 
            {
              "code": "SEC", 
              "name": "second [unit of time]", 
              "suffix": "s"
            }, 
            {
              "code": "C81", 
              "name": "radian", 
              "suffix": "rad"
            }
          ], 
          "measured_value": [
            [
              1, 
              21, 
              101, 
              123
            ], 
            [
              2, 
              22, 
              102, 
              126
            ], 
            [
              3, 
              23, 
              103, 
              129
            ], 
            [
              4, 
              24, 
              104, 
              132
            ]
          ], 
          "name": "lots_of_dims", 
          "outcome": "PASS"
        }, 
        "unset_dims": {
          "dimensions": [
            {
              "code": "HTZ", 
              "name": "hertz", 
              "suffix": "Hz"
            }
          ], 
          "name": "unset_dims", 
          "outcome": "UNSET"
        }
      }, 
      "name": "dimensions", 
      "result": {
        "phase_result": "CONTINUE"
      }, 
      "start_time_millis": 1480507463460
    }, 
    {
      "attachments": {
        "example_attachment.txt": {
          "data": "VGhpcyBpcyBhIHRleHQgZmlsZSBhdHRhY2htZW50Lgo=", 
          "mimetype": "text/plain"
        }, 
        "test_attachment": {
          "data": "VGhpcyBpcyB0ZXN0IGF0dGFjaG1lbnQgZGF0YS4=", 
          "mimetype": null
        }
      }, 
      "codeinfo": {
        "docstring": null, 
        "name": "attachments", 
        "sourcecode": "def attachments(test):\n  test.attach('test_attachment', 'This is test attachment data.')\n  test.attach_from_file('example_attachment.txt')\n"
      }, 
      "end_time_millis": 1480507463469, 
      "measurements": {}, 
      "name": "attachments", 
      "result": {
        "phase_result": "CONTINUE"
      }, 
      "start_time_millis": 1480507463461
    }
  ], 
  "start_time_millis": 1480507454324, 
  "station_id": "fahhem.mtv.corp.google.com"
}